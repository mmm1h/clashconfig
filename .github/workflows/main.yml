# .github/workflows/generate_mihomo_test_js.yml

name: Generate mihomo_test.js from alc4.ini

# 控制工作流何时运行
on:
  # 允许你从 Actions 标签页手动运行这个工作流
  workflow_dispatch:

  # 设定时任务，使用 cron 语法。'0 0 * * *' 表示每天 UTC 时间 0 点运行
  # 对应北京时间上午8点
  schedule:
    - cron: '0 0 * * *'

  # 在推送到 main 分支时触发
  push:
    branches:
      - main
    # 仅当 alc4.ini 文件发生变化时才触发
    paths:
      - 'alc4.ini'

jobs:
  build:
    runs-on: ubuntu-latest
    # 授予工作流向仓库写入内容的权限
    permissions:
      contents: write

    steps:
      # 步骤1: 检出你的仓库代码
      - name: Checkout repository
        uses: actions/checkout@v4

      # 步骤2: 从 alc4.ini 生成 mihomo_test.js
      - name: Generate mihomo_test.js
        run: |
          # 如果任何命令失败，立即退出脚本
          set -e

          INPUT_FILE="alc4.ini"
          OUTPUT_FILE="mihomo_test.js"

          echo "Starting generation of $OUTPUT_FILE from $INPUT_FILE"

          # 检查输入文件是否存在
          if [ ! -f "$INPUT_FILE" ]; then
            echo "Error: Input file '$INPUT_FILE' not found."
            exit 1
          fi

          # 使用 awk 从 ini 文件中提取 [Rule] 部分的内容
          # 逻辑：当遇到'[Rule]'行时，设置标志f=1；当遇到下一个'['开头的行时，重置f=0；在f=1时打印行
          # 然后使用 grep 过滤掉空行和注释行
          RULES=$(awk '/^\[Rule\]/ {f=1; next} /^\[/ {f=0} f' "$INPUT_FILE" | grep -v '^[[:space:]]*$' | grep -v '^[[:space:]]*#')

          # 准备规则以插入到 JavaScript 数组中
          # 1. 转义规则中的单引号
          # 2. 用单引号包裹每一行
          # 3. 用逗号和换行符连接，以提高可读性
          JS_RULES=$(echo "$RULES" | sed "s/'/\\\'/g" | awk '{printf "  \x27%s\x27,\n", $0}')

          # 移除最后一行末尾的逗号
          JS_RULES=$(echo "$JS_RULES" | sed '$ s/,$//')

          # 使用 cat 和 heredoc 创建 mihomo_test.js 的文件内容
          cat > "$OUTPUT_FILE" <<EOL
/*
 * =================================================================================
 * WARNING: THIS FILE IS AUTOGENERATED BY A GITHUB ACTION.
 *
 * DO NOT EDIT THIS FILE MANUALLY. YOUR CHANGES WILL BE OVERWRITTEN.
 *
 * Last generated: $(date -u)
 * Source file: $INPUT_FILE
 * =================================================================================
 */
module.exports.parse = (raw, { yaml, console }) => {
  // 解析原始配置文件
  const profile = yaml.parse(raw);

  // 从 alc4.ini 自动生成的自定义规则
  const customRules = [
${JS_RULES}
  ];

  // 将自定义规则添加到现有规则列表的开头
  // 这样可以确保自定义规则优先匹配
  profile.rules = [...customRules, ...(profile.rules || [])];

  console.log('✅ mihomo_test.js: Successfully injected custom rules from alc4.ini.');

  // 返回修改后的配置（YAML 格式）
  return yaml.stringify(profile);
};
EOL

          echo "$OUTPUT_FILE generated successfully."
          echo "--- Content of $OUTPUT_FILE ---"
          cat "$OUTPUT_FILE" # 在日志中打印文件内容以便调试
          echo "---------------------------------"

      # 步骤3: 提交并推送变更
      # 使用社区的 Action 来自动提交文件
      - name: Commit and push changes
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          # 提交信息
          commit_message: "chore: Auto-generate mihomo_test.js from alc4.ini"
          # 要提交的文件模式
          file_pattern: mihomo_test.js
          # 提交作者信息
          commit_user_name: "github-actions[bot]"
          commit_user_email: "github-actions[bot]@users.noreply.github.com"
          commit_author: "github-actions[bot] <github-actions[bot]@users.noreply.github.com>"
